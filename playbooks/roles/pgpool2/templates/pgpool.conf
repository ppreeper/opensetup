#------------------------------------------------------------------------------
# CONNECTIONS
#------------------------------------------------------------------------------
# - pgpool Connection Settings -
listen_addresses = '*'
port = {{ PGPOOL_PORT }}
socket_dir = '/var/run/postgresql'

# - pgpool Communication Manager Connection Settings -
pcp_listen_address = '*'
pcp_port = {{ PGPOOL_PCP_PORT }}
# pcp_socket_dir = '/var/run/postgresql'
listen_backlog_multiplier = 2
reserved_connections = 0
serialize_accept = off # whether to serialize accept() call to avoid thundering herd problem

# - Backend Connection Settings -
{% for host in groups ['all'] %}
backend_hostname{{ loop.index - 1 }} = '{{ hostvars[host]['ansible_fqdn'] }}'
backend_port{{ loop.index - 1 }} = {{ POSTGRES_PORT }}
backend_weight{{ loop.index - 1 }} = 1
backend_data_directory{{ loop.index - 1 }} = '{{ POSTGRES_DATADIR }}/{{ POSTGRES_VERSION }}/{{ POSTGRES_CLUSTER }}'
backend_flag{{ loop.index - 1 }} = 'ALLOW_TO_FAILOVER' # 'ALLOW_TO_FAILOVER','DISALLOW_TO_FAILOVER','ALWAYS_MASTER'
backend_application_name{{ loop.index - 1 }} = '{{ hostvars[host]['ansible_fqdn'] }}'

{% endfor %}

# - Authentication -
enable_pool_hba = off # Use pool_hba.conf for client authentication
pool_passwd = 'pool_passwd' # File name of pool_passwd for md5 authentication.
authentication_timeout = 60 # Delay in seconds to complete client authentication
allow_clear_text_frontend_auth = off # Allow Pgpool-II to use clear text password authentication

# - SSL Connections -
ssl = off

#------------------------------------------------------------------------------
# POOLS
#------------------------------------------------------------------------------
num_init_children = 32
max_pool = 4

# - Life time -
child_life_time = 300
child_max_connections = 0
connection_life_time = 0
client_idle_limit = 0

#------------------------------------------------------------------------------
# LOGS
#------------------------------------------------------------------------------
# - Where to log -
log_destination = 'syslog' # 'syslog','stderr','syslog,stderr'
# - What to log -
log_line_prefix = '%t: pid %p: '   # printf-style string to output at beginning of each log line.
# logging contents
log_disconnnections = off
log_connections = off
log_hostname = off
log_statement = off
log_per_node_statement = off
log_client_messages = off
log_standby_delay = 'if_over_threshold' # Log standby delay:always, if_over_threshold, none
# - Debug -
log_error_verbosity = 'DEFAULT' # TERSE, DEFAULT, VERBOSE - TERSE excludes the logging of DETAIL, HINT, QUERY and CONTEXT
client_min_messages = 'NOTICE' # DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, LOG, NOTICE, WARNING, ERROR
log_min_messages = 'WARNING' # DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL, PANIC
# - Syslog specific -
syslog_facility = 'LOCAL0'  # Syslog local facility. Default to LOCAL0
syslog_ident = 'pgpool'     # Syslog program identification string: <pgpool>

#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------
pid_file_name = '/var/run/postgresql/pgpool.pid'
logdir = '/var/log/postgresql'

#------------------------------------------------------------------------------
# CONNECTION POOLING
#------------------------------------------------------------------------------
connection_cache = on
reset_query_list = 'ABORT; DISCARD ALL'

#------------------------------------------------------------------------------
# LOAD BALANCING MODE
#------------------------------------------------------------------------------
load_balance_mode = on
ignore_leading_white_space = on

#------------------------------------------------------------------------------
# REPLICATION MODE - PGPOOL
#------------------------------------------------------------------------------
replication_mode = off

#------------------------------------------------------------------------------
# MASTER/SLAVE MODE - POSTGESQL
#------------------------------------------------------------------------------
master_slave_mode = on
master_slave_sub_mode = 'stream'

# - Streaming -
sr_check_period = 0
sr_check_user = '{{ PGPOOL_USERNAME }}'
sr_check_password = ''
sr_check_database = '{{ POSTGRES_USERNAME }}'
delay_threshold = 0

#------------------------------------------------------------------------------
# HEALTH CHECK GLOBAL PARAMETERS
#------------------------------------------------------------------------------
health_check_period = 5
health_check_timeout = 0
health_check_user = '{{ PGPOOL_USERNAME }}'
health_check_password = ''
health_check_max_retries = 3
health_check_database = ''
health_check_retry_delay = 1
connect_timeout = 10000

#------------------------------------------------------------------------------
# FAILOVER AND FAILBACK
#------------------------------------------------------------------------------
failover_command = '/etc/pgpool2/failover.sh %d %h %p %D %m %H %M %P %r %R %N %S'
# follow_primary_command = '/etc/pgpool2/follow_primary.sh %d %h %p %D %m %H %M %P %r %R %N %S'
failback_command = ''
failover_on_backend_error = on
detach_false_primary = on
search_primary_node_timeout = 300
auto_failback = off
auto_failback_interval = 60

#------------------------------------------------------------------------------
# ONLINE RECOVERY
#------------------------------------------------------------------------------
recovery_user = 'postgres'
recovery_password = ''
recovery_1st_stage_command = '/etc/pgpool2/recovery_1st_stage'
recovery_2nd_stage_command = ''
recovery_timeout = 90
client_idle_limit_in_recovery = 0

#------------------------------------------------------------------------------
# WATCHDOG
#------------------------------------------------------------------------------
use_watchdog = on
trusted_servers = '' # trusted server list which are used to confirm network connection

# - Watchdog communication Settings -
wd_hostname = '{{ inventory_hostname }}'
wd_port = {{PGPOOL_WD_PORT}}
wd_priority = 1
wd_authkey = ''
wd_ipc_socket_dir = '/var/run/postgresql'

{% for host in groups['all'] %}
{% if hostvars[host]['ansible_fqdn'] != inventory_hostname %}
other_pgpool_hostname{{ loop.index - 1 }} = '{{ hostvars[host]['ansible_fqdn'] }}'
other_pgpool_port{{ loop.index - 1 }} = {{PGPOOL_PORT}}
other_wd_port{{ loop.index - 1 }} = {{PGPOOL_WD_PORT}}
{% endif %}

{% endfor %}
# Lifecheck
wd_lifecheck_method = 'heartbeat'
wd_interval = 3
wd_heartbeat_port = {{PGPOOL_HEARTBEAT_PORT}}
# wd_heartbeat_keepalive = 2
# wd_heartbeat_deadtime = 30

{% for host in groups['all'] %}
heartbeat_destination{{ loop.index - 1 }} = '{{ hostvars[host]['ansible_fqdn'] }}'
heartbeat_destination_port{{ loop.index - 1 }} = {{PGPOOL_HEARTBEAT_PORT}}
heartbeat_device{{ loop.index - 1 }} = '{{ NETIF_COMMON }}'

{% endfor %}
# - Virtual IP control Setting -
delegate_IP = '{{ PGPOOL_VIP }}'
if_up_cmd = '/usr/bin/sudo /sbin/ip addr add $_IP_$/24 dev {{ NETIF_COMMON }} label {{ NETIF_COMMON }}:0'
if_down_cmd = '/usr/bin/sudo /sbin/ip addr del $_IP_$/24 dev {{ NETIF_COMMON }}'
arping_cmd = '/usr/bin/sudo /usr/bin/arping -U $_IP_$ -w 1 -I {{ NETIF_COMMON }}'
wd_escalation_command = '/etc/pgpool2/escalation.sh'
